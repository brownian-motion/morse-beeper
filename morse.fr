module Morse where

import Data.HashMap
import Data.Maybe

data Symbol = DOT | DASH

-- Mappings found at http://morsecode.scphillips.com/morse2.html
listOfMappings = [
  ('A', [DOT, DASH]),
  ('B', [DASH, DOT, DOT, DOT]),
  ('C', [DASH, DOT, DASH, DOT]),
  ('D', [DASH, DOT, DOT]),
  ('E', [DOT]),
  ('F', [DOT, DOT, DASH, DOT]),
  ('G', [DASH, DASH, DOT]),
  ('H', [DOT, DOT, DOT, DOT]),
  ('I', [DOT, DOT]),
  ('J', [DOT, DASH, DASH, DASH]),
  ('K', [DASH, DOT, DASH]),
  ('L', [DOT, DASH, DOT, DOT]),
  ('M', [DASH, DASH]),
  ('N', [DASH, DOT]),
  ('O', [DASH, DASH, DASH]),
  ('P', [DOT, DASH, DASH, DOT]),
  ('Q', [DASH, DASH, DOT, DASH]),
  ('R', [DOT, DASH, DOT]),
  ('S', [DOT, DOT, DOT]),
  ('T', [DASH]),
  ('U', [DOT, DOT, DASH]),
  ('V', [DOT, DOT, DOT, DASH]),
  ('W', [DOT, DASH, DASH]),
  ('X', [DASH, DOT, DOT, DASH]),
  ('Y', [DASH, DOT, DASH, DASH]),
  ('Z', [DASH, DASH, DOT, DOT]),

  ('0', [DASH, DASH, DASH, DASH, DASH]),
  ('1', [DOT, DASH, DASH, DASH, DASH]),
  ('2', [DOT, DOT, DASH, DASH, DASH]),
  ('3', [DOT, DOT, DOT, DASH, DASH]),
  ('4', [DOT, DOT, DOT, DOT, DASH]),
  ('5', [DOT, DOT, DOT, DOT, DOT]),
  ('6', [DASH, DOT, DOT, DOT, DOT]),
  ('7', [DASH, DASH, DOT, DOT, DOT]),
  ('8', [DASH, DASH, DASH, DOT, DOT]),
  ('9', [DASH, DASH, DASH, DASH, DOT, DOT]),

  ('Ä', [DOT, DASH, DOT, DASH]),
  ('Á', [DOT, DASH, DASH, DOT, DASH]),
  ('Å', [DOT, DASH, DASH, DOT, DASH]), --Yes, this is redundant
  ('É', [DOT, DOT, DASH, DOT, DOT]),
  ('Ñ', [DASH, DASH, DOT, DASH, DASH]),
  ('Ö', [DASH, DASH, DASH, DOT]),
  ('Ü', [DOT, DOT, DASH, DASH]),

  ('.', [DOT, DASH, DOT, DASH, DOT, DASH]),
  (',', [DASH, DASH, DOT, DOT, DASH, DASH]),
  (':', [DASH, DASH, DASH, DOT, DOT, DOT]),
  ('?', [DOT, DOT, DASH, DASH, DOT, DOT]),
  ('\'', [DOT, DASH, DASH, DASH, DASH, DOT]),
  ('-', [DASH, DOT, DOT, DOT, DASH]),
  ('/', [DASH, DOT, DOT, DASH, DOT]),
  ('(', [DASH, DOT, DASH, DASH, DOT, DASH]),
  (')', [DASH, DOT, DASH, DASH, DOT, DASH]),
  ('[', [DASH, DOT, DASH, DASH, DOT, DASH]),
  (']', [DASH, DOT, DASH, DASH, DOT, DASH]),
  ('"', [DOT, DASH, DOT, DOT, DASH, DOT]),
  ('@', [DOT, DASH, DASH, DOT, DASH, DOT]),
  ('=', [DASH, DOT, DOT, DOT, DASH]) ]

mappings = HashMap.fromList listOfMappings

unrecognizedSymbol = [DOT, DOT, DASH, DASH, DOT, DOT] --same as '?'

charToMorse :: Char -> [Morse.Symbol]
charToMorse c = Maybe.fromMaybe unrecognizedSymbol (HashMap.lookup c mappings)

wordToMorse :: [Char] -> [[Morse.Symbol]]
wordToMorse word = map charToMorse word

stringToMorse :: String -> [[[Morse.Symbol]]]
stringToMorse sentence = map wordToMorse (map unpacked (words sentence))

toMorse :: [Char] -> [[[Morse.Symbol]]]
toMorse sentence = stringToMorse (packed sentence)
