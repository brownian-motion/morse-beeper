package com.brownian.morse;

import com.sun.istack.internal.NotNull;

import javax.sound.midi.*;

/**
 * Accepts a character and sends it to a MorseReceiver as an array of {@link Morse.Symbol Morse symbols}
 */
public class LatinReceiver {
    /**
     * Receives the {@link Morse.Symbol Morse symbols} that this receiver produces.
     */
    private final MorseReceiver morseReceiver;

    /**
     * Creates a LatinReceiver that sends {@link Morse.Symbol Morse symbols} to the given {@link MorseReceiver}.
     * @param receiver A MorseReceiver that will be sent a stream of Morse symbols generated by this object.
     */
    public LatinReceiver(@NotNull MorseReceiver receiver){
        this.morseReceiver = receiver;
    }

    /**
     * A factory method that generates a LatinReceiver connected to the default MIDI {@link Receiver}.
     * @return A LatinReceiver that accepts text, and forwards MIDI commands describing the Morse code to a MIDI receiver.
     * @throws MidiUnavailableException if MIDI could not be loaded
     * @see MidiSystem#getReceiver()
     */
    @NotNull
    public static LatinReceiver getReceiver() throws MidiUnavailableException{
        return LatinReceiverAsync.getReceiver();
    }

    /**
     * Sends this receiver a character, which will then be translated and sent to this object's MorseReceiver.
     * @param latinChar A character to translate and send downstream
     */
    public void send(char latinChar){
        morseReceiver.sendSymbols(Morse.toMorse(latinChar));
        if(!Character.isWhitespace(latinChar))
            morseReceiver.sendSymbol(Morse.Symbol.CHAR_BOUNDARY_PAUSE);
    }

    /**
     * Sends this receiver a string, whose characters will then be translated and sent to this object's MorseReceiver.
     * @param latinText A string to translate and send downstream
     * @see #send(char)
     */
    public void send(@NotNull String latinText){
        for(int i = 0 ; i < latinText.length() ; i++){
            send(latinText.charAt(i));
        }
    }
}
